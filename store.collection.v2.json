{
	"info": {
		"_postman_id": "23410abd-c4fa-4cfd-8091-268cd201116d",
		"name": "store",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "13489123",
		"_collection_link": "https://stepik-5811.postman.co/workspace/Stepik-Workspace~67d96a20-28f0-477c-8ca4-bde0c70e3c8d/collection/13489123-23410abd-c4fa-4cfd-8091-268cd201116d?action=share&source=collection_link&creator=13489123"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 for valid product creation\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Status code is 400 for invalid product data\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"orange\",\r\n    \"price\": 8,\r\n    \"sku\": 123321123,\r\n    \"description\": \"wouh\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/products"
					},
					"response": []
				},
				{
					"name": "List products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Response should contain a list of products\", () => {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/products"
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"randomProductId\", Math.floor(Math.random() * 10) + 1);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let randomProductId = pm.environment.get(\"randomProductId\");\r",
									"\r",
									"pm.test(\"Correct status code based on product existence\", () => {\r",
									"    if (pm.response.json().id) {\r",
									"        pm.test(\"Status code is 200 for valid product ID\", () => {\r",
									"            pm.response.to.have.status(200);\r",
									"        });\r",
									"\r",
									"        pm.test(\"Product ID used in response matches the request\", () => {\r",
									"            let responseProductId = pm.response.json().id;\r",
									"            pm.expect(responseProductId).to.eql(randomProductId);\r",
									"        });\r",
									"    } else {\r",
									"        pm.test(\"Status code is 404 for invalid product ID\", () => {\r",
									"            pm.response.to.have.status(404);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/products/{{randomProductId}}"
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful update\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is 404 for non-existing product update\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"banana\",\r\n    \"price\": 155,\r\n    \"sku\": 123321123,\r\n    \"description\": \"changed description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/products"
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let randomProductId = pm.environment.get(\"randomProductId\");\r",
									"\r",
									"pm.test(\"Status code is 200 or 204 for successful deletion\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"});\r",
									"\r",
									"pm.test(`Product with ID ${randomProductId} deleted successfully`, () => {\r",
									"    let response = pm.response.json();\r",
									"    pm.expect(response.message).to.include(\"deleted\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404 for non-existent product\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"randomProductId\", Math.floor(Math.random() * 10) + 1);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/products/{{randomProductId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 for valid order creation\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Status code is 400 for invalid order data\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/orders"
					},
					"response": []
				},
				{
					"name": "List orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Response should contain a list of orders\", () => {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/orders"
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let randomOrderId = pm.environment.get(\"randomOrderId\");\r",
									"\r",
									"pm.test(\"Correct status code based on order existence\", () => {\r",
									"    if (pm.response.json().id) {\r",
									"        pm.test(\"Status code is 200 for valid order ID\", () => {\r",
									"            pm.response.to.have.status(200);\r",
									"        });\r",
									"\r",
									"        pm.test(\"Order ID used in response matches the request\", () => {\r",
									"            let responseOrderId = pm.response.json().id;\r",
									"            pm.expect(responseOrderId).to.eql(randomOrderId);\r",
									"        });\r",
									"    } else {\r",
									"        pm.test(\"Status code is 404 for invalid order ID\", () => {\r",
									"            pm.response.to.have.status(404);\r",
									"        });\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"randomOrderId\", Math.floor(Math.random() * 10) + 1);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/orders/{{randomOrderId}}"
					},
					"response": []
				},
				{
					"name": "Update order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful update\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is 404 for non-existing order update\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/orders"
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"randomOrderId\", Math.floor(Math.random() * 10) + 1);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let randomOrderId = pm.environment.get(\"randomOrderId\");\r",
									"\r",
									"pm.test(\"Status code is 200 or 204 for successful deletion\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"});\r",
									"\r",
									"pm.test(`Product with ID ${randomOrderId} deleted successfully`, () => {\r",
									"    let response = pm.response.json();\r",
									"    pm.expect(response.message).to.include(\"deleted\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404 for non-existent order\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/orders/{{randomOrderId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 for valid user creation\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Status code is 400 for invalid user data\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Dream\",\r\n    \"lastName\": \"Real\",\r\n    \"email\": \"dream.real@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "List users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Response should contain a list of users\", () => {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"randomUserId\", Math.floor(Math.random() * 10) + 1);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let randomUserId = pm.environment.get(\"randomUserId\");\r",
									"\r",
									"pm.test(\"Correct status code based on user existence\", () => {\r",
									"    if (pm.response.json().id) {\r",
									"        pm.test(\"Status code is 200 for valid user ID\", () => {\r",
									"            pm.response.to.have.status(200);\r",
									"        });\r",
									"\r",
									"        pm.test(\"User ID used in response matches the request\", () => {\r",
									"            let responseUserId = pm.response.json().id;\r",
									"            pm.expect(responseUserId).to.eql(randomUserId);\r",
									"        });\r",
									"    } else {\r",
									"        pm.test(\"Status code is 404 for invalid user ID\", () => {\r",
									"            pm.response.to.have.status(404);\r",
									"        });\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/{{randomUserId}}"
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful update\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is 404 for non-existing user update\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ilon\",\r\n    \"lastName\": \"Mask\",\r\n    \"email\": \"ilon.mask@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\",\r\n    \"id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let randomUserId = pm.environment.get(\"randomUserId\");\r",
									"\r",
									"pm.test(\"Status code is 200 or 204 for successful deletion\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"});\r",
									"\r",
									"pm.test(`Product with ID ${randomUserId} deleted successfully`, () => {\r",
									"    let response = pm.response.json();\r",
									"    pm.expect(response.message).to.include(\"deleted\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404 for non-existent user\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"randomUserId\", Math.floor(Math.random() * 10) + 1);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/users/{{randomUserId}}"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}