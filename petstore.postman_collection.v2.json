{
	"info": {
		"_postman_id": "f24970a8-c474-4ef0-b77e-c4e8e174f241",
		"name": "petstore",
		"description": "This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "13489123",
		"_collection_link": "https://stepik-5811.postman.co/workspace/Stepik-Workspace~67d96a20-28f0-477c-8ca4-bde0c70e3c8d/collection/13489123-f24970a8-c474-4ef0-b77e-c4e8e174f241?action=share&source=collection_link&creator=13489123"
	},
	"item": [
		{
			"name": "pet",
			"item": [
				{
					"name": "Create a new pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": { \"type\": \"integer\" },\r",
									"        \"category\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": { \"type\": \"integer\" },\r",
									"                \"name\": { \"type\": \"string\" }\r",
									"            },\r",
									"            \"required\": [\"id\", \"name\"]\r",
									"        },\r",
									"        \"name\": { \"type\": \"string\" },\r",
									"        \"photoUrls\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"tags\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"id\": { \"type\": \"integer\" },\r",
									"                    \"name\": { \"type\": \"string\" }\r",
									"                },\r",
									"                \"required\": [\"id\", \"name\"]\r",
									"            }\r",
									"        },\r",
									"        \"status\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\"available\", \"pending\", \"sold\"]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"photoUrls\", \"status\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", () => pm.expect(pm.response.code).to.be.oneOf([200, 201]));\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
									"\r",
									"pm.test(\"Response matches JSON schema\", () => {\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(pm.response.json());\r",
									"    pm.expect(valid).to.be.true;\r",
									"\r",
									"    if (!valid) {\r",
									"        console.log(validate.errors);\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/pet"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 123,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/pet"
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Invalid schema",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n name: dog,\r\n breed: spaniel\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/pet"
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Get pet by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": { \"type\": \"integer\" },\r",
									"        \"category\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"id\": { \"type\": \"integer\" },\r",
									"                \"name\": { \"type\": \"string\" }\r",
									"            },\r",
									"            \"required\": [\"id\", \"name\"]\r",
									"        },\r",
									"        \"name\": { \"type\": \"string\" },\r",
									"        \"photoUrls\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"tags\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"id\": { \"type\": \"integer\" },\r",
									"                    \"name\": { \"type\": \"string\" }\r",
									"                },\r",
									"                \"required\": [\"id\", \"name\"]\r",
									"            }\r",
									"        },\r",
									"        \"status\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\"available\", \"pending\", \"sold\"]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"photoUrls\", \"status\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", () => pm.expect(pm.response.code).to.be.oneOf([200, 201]));\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
									"\r",
									"pm.test(\"Response matches JSON schema\", () => {\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(pm.response.json());\r",
									"    pm.expect(valid).to.be.true;\r",
									"\r",
									"    if (!valid) {\r",
									"        console.log(validate.errors);\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": {
								"key": "api_key",
								"value": "<API Key>",
								"in": "header"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/pet",
						"description": "Returns a single pet"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "api_key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "123"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "null"
						},
						{
							"name": "Invalid ID",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "api_key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "0"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete the pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"code\": { \"type\": \"integer\" },\r",
									"        \"type\": { \"type\": \"string\" },\r",
									"        \"message\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"code\", \"type\", \"message\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", () => pm.expect(pm.response.code).to.be.oneOf([200, 201]));\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
									"\r",
									"pm.test(\"Response matches JSON schema\", () => {\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(pm.response.json());\r",
									"    pm.expect(valid).to.be.true;\r",
									"\r",
									"    if (!valid) {\r",
									"        console.log(validate.errors);\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "api_key",
								"value": "quis anim aute"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "1",
									"description": "(Required) Pet id to delete"
								}
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "api_key",
										"value": "quis anim aute"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "123",
											"description": "(Required) Pet id to delete"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Invalid ID",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "<token>",
										"description": "Added as a part of security scheme: oauth2"
									},
									{
										"key": "api_key",
										"value": "quis anim aute"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "0",
											"description": "(Required) Pet id to delete"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"code\": { \"type\": \"integer\" },\r",
									"        \"type\": { \"type\": \"string\" },\r",
									"        \"message\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"code\", \"type\", \"message\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", () => pm.expect(pm.response.code).to.be.oneOf([200, 201]));\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
									"\r",
									"pm.test(\"Response matches summary schema\", () => {\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(pm.response.json());\r",
									"    pm.expect(valid).to.be.true;\r",
									"\r",
									"    if (!valid) {\r",
									"        console.log(\"Validation errors:\", JSON.stringify(validate.errors, null, 2));\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": "{{baseUrl}}/user"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1,\r\n  \"username\": \"Ola793\",\r\n  \"firstName\": \"Olha\",\r\n  \"lastName\": \"Teplova\",\r\n  \"email\": \"olitieplove@gmail.com\",\r\n  \"password\": \"1234567\",\r\n  \"phone\": \"881528712\",\r\n  \"userStatus\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/user"
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Invalid schema",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n name: Olha,\r\n surname: Teplova\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/user"
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "User login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const loginSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"code\": { \"type\": \"integer\" },\r",
									"        \"type\": { \"type\": \"string\" },\r",
									"        \"message\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"code\", \"type\", \"message\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200\", () => pm.expect(pm.response.code).to.eql(200));\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
									"\r",
									"pm.test(\"Response matches login schema\", () => {\r",
									"    const validate = ajv.compile(loginSchema);\r",
									"    const valid = validate(pm.response.json());\r",
									"    pm.expect(valid).to.be.true;\r",
									"\r",
									"    if (!valid) {\r",
									"        console.log(\"Validation errors:\", JSON.stringify(validate.errors, null, 2));\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/user/login"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login?username=Ola793&password=1234567",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "Ola793"
										},
										{
											"key": "password",
											"value": "1234567"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Invalid request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=qwerty&password=uiop",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "qwerty"
										},
										{
											"key": "password",
											"value": "uiop"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Get user by username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": { \"type\": \"integer\" },\r",
									"        \"username\": { \"type\": \"string\" },\r",
									"        \"firstName\": { \"type\": \"string\" },\r",
									"        \"lastName\": { \"type\": \"string\" },\r",
									"        \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
									"        \"password\": { \"type\": \"string\" },\r",
									"        \"phone\": { \"type\": \"string\" },\r",
									"        \"userStatus\": { \"type\": \"integer\" }\r",
									"    },\r",
									"    \"required\": [\"id\", \"username\", \"firstName\", \"lastName\", \"email\", \"phone\", \"userStatus\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200\", () => pm.expect(pm.response.code).to.eql(200));\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
									"\r",
									"pm.test(\"Response matches JSON schema\", () => {\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(pm.response.json());\r",
									"    pm.expect(valid).to.be.true;\r",
									"\r",
									"    if (!valid) {\r",
									"        console.log(validate.errors);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/user"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "Ola793"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Invalid username",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "Ola"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "User logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"code\": { \"type\": \"integer\" },\r",
									"        \"type\": { \"type\": \"string\" },\r",
									"        \"message\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"code\", \"type\", \"message\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200\", () => pm.expect(pm.response.code).to.eql(200));\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
									"\r",
									"pm.test(\"Response matches summary schema\", () => {\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(pm.response.json());\r",
									"    pm.expect(valid).to.be.true;\r",
									"\r",
									"    if (!valid) {\r",
									"        console.log(\"Validation errors:\", JSON.stringify(validate.errors, null, 2));\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/user/logout"
					},
					"response": []
				},
				{
					"name": "Delete the account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"code\": { \"type\": \"integer\" },\r",
									"        \"type\": { \"type\": \"string\" },\r",
									"        \"message\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"code\", \"type\", \"message\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200\", () => pm.expect(pm.response.code).to.eql(200));\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
									"\r",
									"pm.test(\"Response matches summary schema\", () => {\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(pm.response.json());\r",
									"    pm.expect(valid).to.be.true;\r",
									"\r",
									"    if (!valid) {\r",
									"        console.log(\"Validation errors:\", JSON.stringify(validate.errors, null, 2));\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/user"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "Ola793"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Invalid username",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "Ola"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				}
			]
		},
		{
			"name": "store",
			"item": [
				{
					"name": "Place an order for a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const schema =  {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": { \"type\": \"integer\" },\r",
									"        \"petId\": { \"type\": \"integer\" },\r",
									"        \"quantity\": { \"type\": \"integer\", \"minimum\": 1 },\r",
									"        \"shipDate\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
									"        \"status\": { \r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\"placed\", \"approved\", \"delivered\"] \r",
									"        },\r",
									"        \"complete\": { \"type\": \"boolean\" }\r",
									"    },\r",
									"    \"required\": [\"petId\", \"quantity\", \"shipDate\", \"status\", \"complete\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", () => pm.expect(pm.response.code).to.be.oneOf([200, 201]));\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
									"\r",
									"pm.test(\"Response matches summary schema\", () => {\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(pm.response.json());\r",
									"    pm.expect(valid).to.be.true;\r",
									"\r",
									"    if (!valid) {\r",
									"        console.log(\"Validation errors:\", JSON.stringify(validate.errors, null, 2));\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/store/order"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1,\r\n  \"petId\": 123,\r\n  \"quantity\": 2,\r\n  \"shipDate\": \"2024-11-26T15:08:16.179Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/store/order"
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Invalid schema",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"opana\",\r\n  \"petId\": 123,\r\n  \"quantity\": 2,\r\n  \"shipDate\": \"2024-11-26T15:08:16.179Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/store/order"
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Get order by order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const schema =  {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": { \"type\": \"integer\" },\r",
									"        \"petId\": { \"type\": \"integer\" },\r",
									"        \"quantity\": { \"type\": \"integer\", \"minimum\": 1 },\r",
									"        \"shipDate\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
									"        \"status\": { \r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\"placed\", \"approved\", \"delivered\"] \r",
									"        },\r",
									"        \"complete\": { \"type\": \"boolean\" }\r",
									"    },\r",
									"    \"required\": [\"petId\", \"quantity\", \"shipDate\", \"status\", \"complete\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", () => pm.expect(pm.response.code).to.be.oneOf([200, 201]));\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
									"\r",
									"pm.test(\"Response matches summary schema\", () => {\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(pm.response.json());\r",
									"    pm.expect(valid).to.be.true;\r",
									"\r",
									"    if (!valid) {\r",
									"        console.log(\"Validation errors:\", JSON.stringify(validate.errors, null, 2));\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/store/order"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "1"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Invalid ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "0"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Delete the order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"code\": { \"type\": \"integer\" },\r",
									"        \"type\": { \"type\": \"string\" },\r",
									"        \"message\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"code\", \"type\", \"message\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200\", () => pm.expect(pm.response.code).to.eql(200));\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", () => pm.expect(pm.response.responseTime).to.be.below(500));\r",
									"\r",
									"pm.test(\"Response matches summary schema\", () => {\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(pm.response.json());\r",
									"    pm.expect(valid).to.be.true;\r",
									"\r",
									"    if (!valid) {\r",
									"        console.log(\"Validation errors:\", JSON.stringify(validate.errors, null, 2));\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/store/order"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "1"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Invalid ID",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "0"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://petstore.swagger.io/v2",
			"type": "string"
		}
	]
}